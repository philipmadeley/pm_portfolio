$image-path: "../images";

//svg hack
//$image-path: '../assets/images/' !default;
$fallback-extension: 'png' !default;
$retina-suffix: '@2x';
@mixin background-image($name, $size:false){
    background-image: url(#{$image-path}/#{$name}.svg);
    @if($size){
        background-size: $size;
    }
    .no-svg &{
        background-image: url(#{$image-path}/#{$name}.#{$fallback-extension});

        @media only screen and (-moz-min-device-pixel-ratio: 1.5), only screen and (-o-min-device-pixel-ratio: 3/2), only screen and (-webkit-min-device-pixel-ratio: 1.5), only screen and (min-device-pixel-ratio: 1.5) {
          background-image: url(#{$image-path}/#{$name}#{$retina-suffix}.#{$fallback-extension});
        }
    }
}

@mixin image-2x($image) {
  @media (min--moz-device-pixel-ratio: 1.3),
         (-o-min-device-pixel-ratio: 2.6/2),
         (-webkit-min-device-pixel-ratio: 1.3),
         (min-device-pixel-ratio: 1.3),
         (min-resolution: 1.3dppx) {
    /* on retina, use image that's scaled by 2 */
    background: url($image);
    //background-size: $width $height;
  }
}


@mixin alpha-attribute($attribute, $color, $background) {
  $percent: alpha($color) * 100%;
  $opaque: opacify($color, 1);
  $solid-color: mix($opaque, $background, $percent);
  #{$attribute}: $solid-color;
  #{$attribute}: $color;
} //not used yet

// hide-text
@mixin hide-text{
    font: 0/0 a;
    text-shadow: none;
    color: transparent;
}

//hide but print out text
%visuallyhidden {
  margin: -1px;
  padding: 0;
  width: 1px;
  height: 1px;
  overflow: hidden;
  clip: rect(0 0 0 0);
  clip: rect(0, 0, 0, 0);
  position: absolute;
}

//make opace ojbects
@function dark($opacity){
    @return rgba($headings, $opacity)
}
@function light($opacity){
    @return rgba($wt, $opacity)
}

@mixin bg-cover($name) {
  background: url("#{$image-path}/#{$name}.jpg") no-repeat center center; //removed fixed
  //@include image-2x("#{$image-path}/#{$name}2x.jpg" no-repeat center center);
   @media (min--moz-device-pixel-ratio: 1.3),
       (-o-min-device-pixel-ratio: 2.6/2),
       (-webkit-min-device-pixel-ratio: 1.3),
       (min-device-pixel-ratio: 1.3),
       (min-resolution: 1.3dppx) {
background: url("#{$image-path}/#{$name}2x.jpg") no-repeat center center; //removed fixed
-webkit-background-size: cover;
   -moz-background-size: cover;
     -o-background-size: cover;
        background-size: cover;
       }
       -webkit-background-size: cover;
          -moz-background-size: cover;
            -o-background-size: cover;
               background-size: cover;

}

// center align
@mixin center-block {
  display: block;
  margin-left: auto;
  margin-right: auto;
}

// for logo and full-width image not cover
%full-width-content-with-image {
  position: relative;
  &:before, &:after {
    content: '';
    position: absolute;
    top: 0;
    bottom: 0;
    width: 999px;
  }
  &:after {
    right: 100%;
  }
  &:before {
    left: 100%;
  }
}

// full bg
@mixin full-image($name) {
  @extend %full-width-content-with-image;
    background: url("#{$image-path}/#{$name}.jpg") no-repeat center center fixed;
    background-size: cover;
  &:after {
    background: url("#{$image-path}/#{$name}.jpg") no-repeat center center fixed;
    background-size: cover;
  }
  &:before {
    background: url("#{$image-path}/#{$name}.jpg") no-repeat center center fixed;
    background-size: cover;
  }
}

// positioning
@mixin position($position, $args) {
  $offsets: top right bottom left;

  @each $o in $offsets {
    $i: index($args, $o);

    @if $i
    and $i + 1 <= length($args)
    and type-of( nth($args, $i + 1) ) == number {
      #{$o}: nth($args, $i + 1);
    }
  }
    position: $position;

}

@mixin absolute($args) {
  @include position(absolute, $args);
}

@mixin fixed($args) {
  @include position(fixed, $args);
}

@mixin relative($args) {
  @include position(relative, $args);
}

//border sides
@mixin border ($style,  $sides...){
    @if ($style != "") {
        @if ($sides == "") {
            border: $style;

        } @else {
            @each $side in $sides {
               @if ($side == 'top' or
                    $side == 'right' or
                    $side == 'bottom' or
                    $side == 'left') {

                    border-#{$side}: $style;
                }
            }
        }
    }
}
@mixin box-sizing($value) {
    -moz-box-sizing: $value;
         box-sizing: $value;
}

@mixin transition($args...) {
  -webkit-transition: $args;
  -moz-transition: $args;
  -ms-transition: $args;
  -o-transition: $args;
  transition: $args;
}

@mixin clearfix {
  &:after {
    content: "";
    display: table;
    clear: both;
  }
}

@mixin border-radius($radius) {
  -webkit-border-radius: $radius;
  border-radius: $radius;
  background-clip: padding-box;  /* stops bg color from leaking outside the border: */
}

@mixin box-shadow ($value) {
	-webkit-box-shadow: $value;
	-moz-box-shadow:    $value;
	box-shadow:         $value;
}
